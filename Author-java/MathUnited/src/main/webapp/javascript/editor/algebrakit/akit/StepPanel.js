/* 
 * Copyright (C) 2013 AlgebraKIT <info@algebrakit.nl>
 *
 */

define(['jquery', 'akit/Util', 'akit/Parser'], function ($, Util, AKITParser) {
    //private static variables
    //------------------------
    var STEP_HTML =
            '<div class="stepContainer">'
            + '  <div class="shortDescr"/>'
            + '  <div class="subSteps"/>'
            + '  <div class="outContainer">'
            + '    <div class="outExpression"/>'
            + '    <div class="buttonContainer">'
            + '      <div class="ExplainButton akit-panel-button"/>'
            + '      <div class="CollapseButton akit-panel-button"/>'
            + '      <div class="CollapseInnerButton akit-panel-button"/>'
            + '      <div class="ExpandButton akit-panel-button"/>'
            + '    </div>'
            + '  </div>'
            + '  <div class="StepPanelFooterDiv"/>'
            + '</div>';

    var AFTERSTEP_HTML =
            '<div class="afterStepsContainer">'
            + '   <div class="afterStepMain"/>'
            + '   <div class="afterSteps"/>'
            + '</div>';

    //A StepPanel is a view of a WKStep
    //step  : Instance of WKStep.Step, representing a step generated by AlgebraKIT
    //dom_jq: jquery reference to the container for this StepPanel
    //parentStepPanel: StepPanel object that contains this step
    function StepPanel(step, dom_jq, parentStepPanel) {
        //private fields
        //-----------------
         var _this;
                
        //state variables
        var subStepsCreated = false;
        var afterStepsCreated = false;
        var explanationExpanded = false;

        //the panel consists of two sections which cannot be both visible
        //- the stepContainer represents a single step that can contain explanation
        //  or substeps. Substeps is a list of steps that form a part of this step.
        //  e.g. a step that represents application of abc-formula to solve  a quadratic equation, 
        //  contains the calculation of the discriminant D=b^2-4ac. The steps of this calculation
        //  are contained in the substeps.
        //- the aftersteps are steps that *follow* the current step, but are of lower 'level' (complexity)
        //  and are not showed unless explicitly requested by the user. Default, the result of the current
        //  step (the outExpression) implicilty contains the result of the afersteps. When
        //  the user clicks the 'expand'-button, the afterStepsContainer is shown which shows the detailed
        //  derivation. The current step (which is at a higher aggregation level) must be hidden then.
        var stepContainer = $(STEP_HTML);
        var afterDivContainer = $(AFTERSTEP_HTML);
        dom_jq.append(stepContainer);
        dom_jq.append(afterDivContainer);
        
        //create references to elements now. If we do it after full setup of the 
        //StepPanel, then jquery will search also within nested StepPanels. We only
        //want references to elements of this instance.
        var subStepsContainer = $('.subSteps', stepContainer).css('display', 'none');;
        var afterStepsContainer = afterDivContainer.css('display', 'none');;
        var afterStepMain = $('.afterStepMain', afterDivContainer);
        var afterSteps = $('.afterSteps', afterDivContainer);
        var outExpressionElm = $('.outExpression', stepContainer);
        var shortDescrElm = $('.shortDescr', stepContainer);
        var explainButtonElm = $('.ExplainButton', stepContainer);
        var collapseButtonElm = $('.CollapseButton', stepContainer);
        var expandButtonElm = $('.ExpandButton', stepContainer).css('display', 'none');
        var collapseInnerButtonElm = $('.CollapseInnerButton', stepContainer).css('display', 'none');
        
        var afterStepPanels = [];
        
        //private functions
        //-----------------
        //shows or hides buttons, depending on the flags in this object
        function updateButtons() {
            explainButtonElm.css('display', 'none');
            collapseButtonElm.css('display', 'none');
            if(step.containsExplanation() || step.containsSteps()) {
                if (explanationExpanded) {
                    collapseButtonElm.css('display', 'block');
                } else explainButtonElm.css('display', 'block');
            }
        }
        
        function createSubElements() {
            if (!step.containsSteps() && !step.containsExplanation()) return;
            subStepsContainer.css('display', 'block');
            if (subStepsCreated)  return;
            var explanationHTML = '';
            var nprocs = 0;
            var procArray = [];
            var nChilds = step.stepList.length;
            for (var ii = 0; ii < nChilds; ii++) {
                var child = step.stepList[ii];
                if (child.text) {
                    explanationHTML = explanationHTML + child.text;
                } else {
                    //create placeholder for this step
                    explanationHTML = explanationHTML + '<div class="subProcStep"></div>';
                    procArray[nprocs] = child;
                    nprocs++;
                }
            }
            AKITParser.parseFromHTML(explanationHTML, subStepsContainer[0]);
            var ii = 0;
            $('.subProcStep',subStepsContainer).each(function(){
                var next = null;
                if(ii<procArray.length-1) next = procArray[ii+1];
                new StepPanel(procArray[ii], $(this), null, next);
                ii++;
            });
            MathJax.Hub.Queue(["Typeset", MathJax.Hub, subStepsContainer[0]]);
            subStepsCreated = true;
        }
        function createAfterElements() {
            var afterList = step.zoomIn(); //get afterList from WKProcStep
            afterStepPanels.push(new StepPanel(afterList[0], afterStepMain, _this));
            var nchilds = afterList.length;
            for (var ii = 1; ii < nchilds; ii++) {
                afterStepPanels.push(new StepPanel(afterList[ii], afterSteps, _this));
            }
            afterStepPanels[nchilds - 1].showCollapseAfterStepsButton();
            afterStepsCreated = true;
            
        }

        explainButtonElm.click(function(){
            _this.showExplanation();
        });
        collapseButtonElm.click(function(){
            _this.collapseExplanation();
        });
        expandButtonElm.click(function(){
            _this.showAfterSteps();
        });
        collapseInnerButtonElm.click(function(){
            if (parentStepPanel) parentStepPanel.closeAfterSteps();
        });

        if(step.zoomInAllowed()) expandButtonElm.css('display','block');
        
        // a step consists of two containers: one for this step and one for after steps.
        // Only one of these can be visible at the same time
        if (step.shortDescr) {
            Util.toDOM(step.shortDescr, shortDescrElm);
        }
        
        var outExpression = step.getRenderedOutExpression();
        if (outExpression) {  
            Util.toDOM(outExpression, outExpressionElm);
        }

        //add buttons
        updateButtons();
        
        _this = {
            closeAfterSteps: function() {
                afterStepsContainer.css('display', 'none');
                stepContainer.css('display','block');
                step.zoomOut();
                if(afterStepPanels[0].isExplanationExpanded()) {
                    _this.showExplanation();
                } else {
                    _this.collapseExplanation();
                }
                updateButtons();
            },
            collapseExplanation: function() {
                subStepsContainer.css('display', 'none');
                explanationExpanded = false;
                updateButtons();
            },
            isExplanationExpanded: function() {
                return explanationExpanded;
            },
            showAfterSteps: function() {
                if (!step.zoomInAllowed()) return;
                if (!afterStepsCreated) createAfterElements();
                afterDivContainer.css('display','block');
                stepContainer.css('display','none');
                if(explanationExpanded) {
                    afterStepPanels[0].showExplanation();
                } else {
                    afterStepPanels[0].collapseExplanation();
                }
                updateButtons();
            },
            showCollapseAfterStepsButton: function() {
                collapseInnerButtonElm.css('display', 'block');
            },
            showExplanation: function() {
                if (!subStepsCreated)  createSubElements();
                subStepsContainer.css('display', 'block');
                explanationExpanded = true;
                updateButtons();
            }
        };
        return _this;
        
    }
    return (StepPanel);
});
